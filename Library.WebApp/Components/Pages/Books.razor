@page "/books"
@using Library.WebApp.DTOs
@using Library.WebApp.Helpers
@rendermode InteractiveServer

<div class="container">
    <h1>Books</h1>
    <div class="row">
        <div class="col-md-3">
            <label>Title:</label>
            <input type="text" @bind="searchTitle"/>
        </div>
        <div class="col-md-3">
            <label>Author:</label>
            <input type="text" @bind="searchAuthor"/>
        </div>
        <div class="col-md-3">
            <label>ISBN:</label>
            <input type="text" @bind="searchIsbn"/>
        </div>
        <div class="col-md-3">
            <button class="btn btn-primary" @onclick="SearchBooks">Search</button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @if (books is not null)
            {
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Author</th>
                        <th>ISBN</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var book in books.Results)
                    {
                        <tr>
                            <td>@book.Id</td>
                            <td>@book.Title</td>
                            <td>@book.Author</td>
                            <td>@book.Isbn</td>
                            <td>@book.Status.ToString()</td>
                            <td>
                                <button class="btn btn-success" @onclick="@(l => Borrow(book.Id))">Borrow</button>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="@(l => Release(book.Id))">Release</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                
                <div class="my-3 row">
                    <div class="col-md-2">
                        <button class="btn btn-primary" @onclick="MoveToThePreviousPage">Previous</button>
                    </div>
                    <div class="col-md-2">
                        <p>Books from @(skipCount + 1) to @books?.TotalCount</p>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-primary" @onclick="MoveToTheNextPage">Next</button>
                    </div>
                </div>

            }
        </div>
        
        @if (LibraryClient.IsAdmin)
        {
            <div class="my-3 row">
                <div class="col-md-3">
                    <label>Title:</label>
                    <input type="text" @bind="newBookTitle"/>
                </div>
                <div class="col-md-3">
                    <label>Author:</label>
                    <input type="text" @bind="newBookAuthor"/>
                </div>
                <div class="col-md-3">
                    <label>ISBN:</label>
                    <input type="text" @bind="newBookIsbn"/>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-primary" @onclick="AddNewBook">Add New Book</button>
                </div>
            </div>
        }

        @if (errorMessage is not null)
        {
            <h2 class="alert-danger">@errorMessage</h2>
        }

    </div>
</div>

@code {

    private string newBookIsbn;
    private string newBookTitle;
    private string newBookAuthor;

    private int skipCount;
    private const int maxPageSize = 5;

    private string searchTitle;
    private string searchAuthor;
    private string searchIsbn;

    private PagedResult<Book> books;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await SearchBooks();
    }

    private async Task MoveToTheNextPage()
    {
        if (books is null) return;

        skipCount += maxPageSize;
        if (skipCount > books.TotalCount) skipCount = books.TotalCount - maxPageSize;
        if (skipCount < 0) skipCount = 0;

        await SearchBooks();
    }

    private async Task MoveToThePreviousPage()
    {
        if (books is null) return;

        skipCount -= maxPageSize;
        if (skipCount < 0) skipCount = 0;

        await SearchBooks();
    }

    private async Task SearchBooks()
    {
        var result = await LibraryClient.GetBooks(searchTitle, searchAuthor, searchIsbn, skipCount, maxPageSize);

        books = result.Value;
        errorMessage = result.Message;
        if (skipCount > books?.TotalCount) skipCount = 0;
    }

    private async Task AddNewBook()
    {
        var result = await LibraryClient.AddNewBook(newBookTitle, newBookAuthor, newBookIsbn);
        if (result.Success) await SearchBooks();
        errorMessage = result.Message;
    }

    private async Task Borrow(int bookId)
    {
        var result = await LibraryClient.Borrow(bookId);

        if (result.Success)
        {
            var book = books.Results.First(b => b.Id == bookId);
            book.Status = result.Value.Status;
        }

        errorMessage = result.Message;
    }

    private async Task Release(int bookId)
    {
        var result = await LibraryClient.Release(bookId);

        if (result.Success)
        {
            var book = books.Results.First(b => b.Id == bookId);
            book.Status = result.Value.Status;
        }

        errorMessage = result.Message;
    }

}